#!/usr/bin/env python3

import argparse 
import os
import time

def load_file(file):
    datas = {}

    with open(file, 'rt') as f:
        items = f.readlines()
        for i in items:
            l = i.split(',')
            try:
                t, n, d = l[0], l[1], 100 - float(l[4])
                if not t in datas:
                    datas[t] = {}

                datas[t][n] = d
            except:
                continue  


    cores_key = list(list(datas.values())[0].keys())
    time_key = list(datas.keys())
    time_key.sort()
    
    return (datas, cores_key, time_key)

def save_file(file, data, cores, times):
    with open(file, 'wt+') as f:
        t = ['time']
        t.extend(cores)
        f.writelines(','.join(t) + '\n')
        for t in times:
            time = [t]
            for c in cores:
                time.append(str(data[t][c]))
            f.writelines(','.join(time) + '\n')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('--interval', '-i', type=int, help='interval of mpstat for capture data', default=1)
    parser.add_argument('--epoch', '-e', type=int, help='epoch of mpstat for capture data', default=5)
    parser.add_argument('--file', '-f', type=str, help='export mpstat data', default='export.csv')
    parser.add_argument('--tmp', '-t', type=str, help='temporary file for mpstat and this program.', default='')
    
    args = parser.parse_args()
    
    if args.tmp == '':
        args.tmp = str(int(time.time())) + '.txt'
    
    print("create temporary file : {0}".format(args.tmp))

    s = time.time()
    print("start: get cpu core information.")
    os.system("sar -P ALL -u {0} {1}  | awk 'BEGIN {{OFS=\",\"}} {{ if ($1 ~ /^[0-9]/ && $2 == \"AM\" || $2 == \"PM\") {{ print $1 \" \" $2, $3, $5, $7, $9, $11, $13 }} }}' > {2}".format(args.interval, args.epoch, args.tmp))
    e = time.time()
    
    print("finish: get cpu core information. ({0} s)".format(e -s ))

    s = time.time()
    print("start: convert temporary file to csv file.")
    d, c, t = load_file(args.tmp)
    save_file(args.file, d, c, t)
    print("finish: convert temporary file to csv file. ({0} s)".format(e -s))
    e = time.time()
    
    os.remove(args.tmp)
    print("finish: remove that temporray file.")
    
